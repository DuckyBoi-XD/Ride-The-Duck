name: Build and Publish to PyPI

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Extract version from tag
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Extracted version: $VERSION"
        else
          VERSION="0.0.0"
          echo "No tag found, using default version: $VERSION"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Update version in pyproject.toml
      run: |
        echo "Updating version to ${{ steps.get_version.outputs.VERSION }}"
        sed -i 's/version = ".*"/version = "${{ steps.get_version.outputs.VERSION }}"/' pyproject.toml
        echo "Updated pyproject.toml:"
        grep 'version = ' pyproject.toml
        
    - name: Build package
      run: python -m build
      
    - name: Check build artifacts
      run: |
        ls -la dist/
        python -m twine check dist/*
        
    - name: Publish to Test PyPI
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        python -m twine upload --repository testpypi dist/* --verbose
        
    - name: Publish to PyPI
      if: github.event_name == 'release' && github.event.action == 'published'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        python -m twine upload dist/* --verbose